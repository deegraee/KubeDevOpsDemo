steps:

  # Apply Terraform to get the IP addresses
  - name: 'hashicorp/terraform:light'
    args: ['apply', '-auto-approve']
    id: 'apply-terraform'

  # Retrieve the Terraform outputs and update environment variables
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        terraform output -json > terraform_output.json

  # Run the script to update main.js and Kubernetes YAML files
  - name: 'node:22'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        npm install -g fs
        node updateConfig.js
        
  # Build Docker images for the backend and frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/micro-docker-test/deploy-backend:latest', './backend']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/micro-docker-test/deploy-frontend:latest', './frontend']

    # Push images to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/micro-docker-test/deploy-backend:latest']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/micro-docker-test/deploy-frontend:latest']

    # Deploy to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/backend-deployment.yaml', '--namespace=backend-namespace']
    env: ['CLOUDSDK_COMPUTE_ZONE=us-central1-a', 'CLOUDSDK_CONTAINER_CLUSTER=test-cluster']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/backend-service.yaml', '--namespace=backend-namespace']
    env: ['CLOUDSDK_COMPUTE_ZONE=us-central1-a', 'CLOUDSDK_CONTAINER_CLUSTER=test-cluster']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/postgres-init-config.yaml', '--namespace=backend-namespace']
    env: ['CLOUDSDK_COMPUTE_ZONE=us-central1-a', 'CLOUDSDK_CONTAINER_CLUSTER=test-cluster']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/postgres-pvc.yaml', '--namespace=backend-namespace']
    env: ['CLOUDSDK_COMPUTE_ZONE=us-central1-a', 'CLOUDSDK_CONTAINER_CLUSTER=test-cluster']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/postgres-deployment.yaml', '--namespace=backend-namespace']
    env: ['CLOUDSDK_COMPUTE_ZONE=us-central1-a', 'CLOUDSDK_CONTAINER_CLUSTER=test-cluster']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/postgres-service.yaml', '--namespace=backend-namespace']
    env: ['CLOUDSDK_COMPUTE_ZONE=us-central1-a', 'CLOUDSDK_CONTAINER_CLUSTER=test-cluster']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/frontend-deployment.yaml', '--namespace=frontend-namespace']
    env: ['CLOUDSDK_COMPUTE_ZONE=us-central1-a', 'CLOUDSDK_CONTAINER_CLUSTER=test-cluster']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/frontend-service.yaml', '--namespace=frontend-namespace']
    env: ['CLOUDSDK_COMPUTE_ZONE=us-central1-a', 'CLOUDSDK_CONTAINER_CLUSTER=test-cluster']


options:
  logging: CLOUD_LOGGING_ONLY